setwd("C:/Users/skysheng/OneDrive - UBC/University of British Columbia/Research/PhD Project/Lameness one year trial/R package project and Git/competition_dominance_analysis")
library(renv)
renv::init()
renv::snapshot()
library(ProjectTemplate)
setwd("C:/Users/skysheng/OneDrive - UBC/University of British Columbia/Research/PhD Project/Lameness one year trial/R package project and Git")
create.project('test')
########################################## Load Packages ##########################################
###################################################################################################
# Load all packages from library
library(lubridate)
library(plyr)
library(ggplot2)
library(pdftools)
install.packages("lintr")
library(lintr)
setwd("C:/Users/skysheng/OneDrive - UBC/University of British Columbia/Research/PhD Project/Lameness one year trial/Analysis/Dominance_competition_density/resource occupancy 4 method comparison/method 3/code")
lint("competition_paepr_full_analysis_m3_steepness.R")
install.packages("here")
install.packages("roxygen2")
library(roxygen2)
library(here)
test <- here()
test
data_dir <- here("data")
data_dir
here()
here("data/feed")
library(lubridate)
###################################################################################################
######################################### TO BE DELETED ###########################################
###################################################################################################
# Load all packages from library
library(lubridate)
library(plyr)
#library(ggplot2)
daylight_saving_table <- read.csv(here("data/daylight_saving_csv.csv"), header = TRUE)
here("data/daylight_saving_csv.csv")
# Load all packages from library
library(lubridate)
library(plyr)
library(here)
here("data/daylight_saving_csv.csv")
here("data")
?here()
here()
library('ProjectTemplate')
load.project()
View(config)
library('ProjectTemplate')
load.project()
# Load all packages from library
library(lubridate)
library(plyr)
library(here)
################################################################################
###################### data loading & processing ###############################
################################################################################
###### Load feed and water file names
# set work directory and load data
input_dir <- here("data")
output_dir <- here("result")
# load in feed and water data
fileNames.f <- list.files(path = here("data/feed_test"),full.names = TRUE,
recursive = TRUE,pattern =".DAT")
fileNames.w <- list.files(path = here("data/water_test"),full.names = TRUE,
recursive = TRUE,pattern =".DAT")
fileNames.f <- sort(fileNames.f)
fileNames.w <- sort(fileNames.w)
################################################################################
############# customized processing for this study (hard-coded) ################
################################################################################
# this part involves processing the data that is customized for this study only
# please change this based on your study
# process daylight saving dates dataframe and warning date data frame
daylight_saving_table <- daylight_saving_process(daylight_saving_csv)
warning_days$date <- ymd(warning_days$date, tz=time_zone)
################################################################################
##### Feeding & Drinking loading and initial processing from Insentec Data #####
################################################################################
# check if you have both water and feed data for each day
# we only retain the dates when both drinking and feeding data are available at
# the same time
date_compare <- compare_files(fileNames.f, fileNames.w)
fileNames.f <- date_compare$Feed_dir
fileNames.w <- date_compare$Drink_dir
# get date range for this dataset
date_result <- get_date_range(date_compare)
start_date <- date_result$start_date
end_date <- date_result$end_date
date_range <- date_result$date_range
# read in feed and water data into a list of dataframes
all.fed <- process_all_feed(fileNames.f, coln, cow_delete_list, feed_transponder_delete_list, min_feed_bin, max_feed_Bin, feed_coln_to_keep)
all.wat <- process_all_water(fileNames.w, coln.wat, cow_delete_list, wat_transponder_delete_list, min_wat_bin, max_wat_Bin, wat_coln_to_keep, bin_id_add)
all.comb <- combine_feeder_and_water_data(all.fed, all.wat)
# combine data frame different dates into 1 master dataframe
# Calling the function for each data list:
master_feeding <- merge_data(all.fed)
master_drinking <- merge_data(all.wat)
master_comb <- merge_data(all.comb)
View(master_comb)
View(all.fed)
3507 + 4034 + 3763
df_list = all.comb
all_fee = all.fed
all_feed = all.fed
all_water = all.wat
master_feed = master_feeding
master_wat = master_drinking
Insentec_warning <- generate_warning_df(df_list, data_source)
long_feed_dur_list <- list()
long_wat_dur_list <- list()
##### general Insentec warning:
# calculate total number of cows in the dataframe
Insentec_warning <- total_cow_num(df_list, Insentec_warning)
data_source
Insentec_warning <- generate_warning_df(df_list, data_source)
Insentec_warning <- generate_warning_df_empty(df_list, data_source)
long_feed_dur_list <- list()
long_wat_dur_list <- list()
##### general Insentec warning:
# calculate total number of cows in the dataframe
Insentec_warning <- total_cow_num(df_list, Insentec_warning)
# double detection: same cow shows up at 2 bins
results <- get_all_double_detections_1cow2bin(df_list, Insentec_warning)
double_bin_detection_list <- results$double_bin_detection_list
Insentec_warning <- results$WarningData
# double cow detection: same bin registers 2 cows
results <- get_all_double_cow_detections(df_list, Insentec_warning)
double_cow_detection_list <- results$DoubleCowDetectionList
Insentec_warning <- results$WarningData
##### feed data warning
if ((data_source == "feed") | (data_source == "feed and water")) {
# long feeding duration
results <- check_long_durations(all_feed, high_feed_dur_threshold, master_feed, Insentec_warning, type = "feed")
long_feed_dur_list <- results$LongDurationList
Insentec_warning <- results$InsentecWarning
}
Insentec_warning <- generate_warning_df_empty(df_list, data_source)
long_feed_dur_list <- list()
long_wat_dur_list <- list()
##### general Insentec warning:
# calculate total number of cows in the dataframe
Insentec_warning <- total_cow_num(df_list, Insentec_warning)
# double detection: same cow shows up at 2 bins
results <- get_all_double_detections_1cow2bin(df_list, Insentec_warning)
double_bin_detection_list <- results$double_bin_detection_list
Insentec_warning <- results$WarningData
# double cow detection: same bin registers 2 cows
results <- get_all_double_cow_detections(df_list, Insentec_warning)
double_cow_detection_list <- results$DoubleCowDetectionList
Insentec_warning <- results$WarningData
View(Insentec_warning)
View(double_cow_detection_list)
all_comb = all.comb
double_detection <- data.frame()
double_bin_detection_list <- list()
for(i in 1:length(all_comb)) {
daily_double_detection <- get_double_detections_for_day(all_comb[[i]])
double_detection <- rbind(double_detection, daily_double_detection)
if(nrow(daily_double_detection) > 0) {
faulty_bin <- daily_double_detection
faulty_bin$rowNum <- seq_len(nrow(faulty_bin))
faulty_bin2 <- faulty_bin[faulty_bin$rowNum %% 2 != 0, ]
double_detection_bin <- sort(unique(faulty_bin2$Bin))
Insentec_warning$double_bin_detection_bin[i] <- paste(double_detection_bin, collapse = "; ")
}
double_bin_detection_list[[i]] <- daily_double_detection
names(double_bin_detection_list)[i] <- names(all_comb)[i]
}
View(double_bin_detection_list)
View(double_bin_detection_list[["2021-01-20"]])
# calculate total number of cows in the dataframe
Insentec_warning <- total_cow_num(df_list, Insentec_warning)
# double detection: same cow shows up at 2 bins
results <- get_all_double_detections_1cow2bin(df_list, Insentec_warning)
double_bin_detection_list <- results$double_bin_detection_list
Insentec_warning <- results$WarningData
# calculate total number of cows in the dataframe
Insentec_warning <- total_cow_num(df_list, Insentec_warning)
# double detection: same cow shows up at 2 bins
results <- get_all_double_detections_1cow2bin(df_list, Insentec_warning)
double_bin_detection_list <- results$DoubleDetectionList
Insentec_warning <- results$WarningData
View(Insentec_warning)
View(double_bin_detection_list)
View(double_bin_detection_list[["2021-01-20"]])
# double cow detection: same bin registers 2 cows
results <- get_all_double_cow_detections(df_list, Insentec_warning)
double_cow_detection_list <- results$DoubleCowDetectionList
Insentec_warning <- results$WarningData
View(double_cow_detection_list)
data_source
(data_source == "feed") | (data_source == "feed and water")
results <- check_long_durations(all_feed, high_feed_dur_threshold, master_feed, Insentec_warning, type = "feed")
all_data = all_feed
high_duration = high_feed_dur_threshold
master_data = master_feed
type
type="feed"
require(here)  # Ensure the required package is loaded
# Define the file name based on type
plot_name <- ifelse(type == "feed", "feed_allDate_boxplot.pdf", "water_allDate_boxplot.pdf")
pdfPath = here::here(paste0("graphs/", plot_name))
pdf(file=pdfPath)
boxplot(master_data$Duration, main=paste(names(all_data)[1], " to ", names(all_data)[length(all_data)], type, sep = "-"))
dev.off() # close the pdf file
long_duration_list <- list()
for(u in 1:length(all_data)) {
extended_data <- all_data[[u]][which(all_data[[u]]$Duration > high_duration),]
cur_index <- length(long_duration_list)+1
long_duration_list[[cur_index]] <- extended_data
names(long_duration_list)[cur_index] <- names(all_data)[u]
extended_bin <- sort(unique(extended_data$Bin))
extended_bin_str <- paste(unlist(extended_bin), collapse="; ")
colname_to_update <- ifelse(type == "feed", "long_feed_duration_bin", "long_water_duration_bin")
Insentec_warning[colname_to_update][u] <- extended_bin_str #record it on warning message sheet
}
u = 1
extended_data <- all_data[[u]][which(all_data[[u]]$Duration > high_duration),]
cur_index <- length(long_duration_list)+1
long_duration_list[[cur_index]] <- extended_data
names(long_duration_list)[cur_index] <- names(all_data)[u]
extended_bin <- sort(unique(extended_data$Bin))
extended_bin_str <- paste(unlist(extended_bin), collapse="; ")
colname_to_update <- ifelse(type == "feed", "long_feed_duration_bin", "long_water_duration_bin")
Insentec_warning[colname_to_update][u] <- extended_bin_str #record it on warning message sheet
long_duration_list <- list()
for(u in 1:length(all_data)) {
print(u)
extended_data <- all_data[[u]][which(all_data[[u]]$Duration > high_duration),]
cur_index <- length(long_duration_list)+1
long_duration_list[[cur_index]] <- extended_data
names(long_duration_list)[cur_index] <- names(all_data)[u]
extended_bin <- sort(unique(extended_data$Bin))
extended_bin_str <- paste(unlist(extended_bin), collapse="; ")
colname_to_update <- ifelse(type == "feed", "long_feed_duration_bin", "long_water_duration_bin")
Insentec_warning[colname_to_update][u] <- extended_bin_str #record it on warning message sheet
}
u = 3
extended_data <- all_data[[u]][which(all_data[[u]]$Duration > high_duration),]
cur_index <- length(long_duration_list)+1
long_duration_list[[cur_index]] <- extended_data
names(long_duration_list)[cur_index] <- names(all_data)[u]
extended_bin <- sort(unique(extended_data$Bin))
extended_bin_str <- paste(unlist(extended_bin), collapse="; ")
colname_to_update <- ifelse(type == "feed", "long_feed_duration_bin", "long_water_duration_bin")
extended_bin_str
Insentec_warning[colname_to_update][u] <- extended_bin_str #record it on warning message sheet
View(Insentec_warning)
colnames(Insentec_warning)
colname_to_update <- ifelse(type == "feed", "long_feed_duration_bin", "long_water_duration_bin")
colname_to_update
Insentec_warning[colname_to_update][u]
Insentec_warning[colname_to_update]
u
Insentec_warning[u, colname_to_update]
Insentec_warning[u, colname_to_update] <- extended_bin_str #record it on warning message sheet
check_long_durations <- function(all_data, high_duration = 2000, master_data,
Insentec_warning, type = "feed") {
require(here)  # Ensure the required package is loaded
# Define the file name based on type
plot_name <- ifelse(type == "feed", "feed_allDate_boxplot.pdf", "water_allDate_boxplot.pdf")
pdfPath = here::here(paste0("graphs/", plot_name))
pdf(file=pdfPath)
boxplot(master_data$Duration, main=paste(names(all_data)[1], " to ", names(all_data)[length(all_data)], type, sep = "-"))
dev.off() # close the pdf file
long_duration_list <- list()
for(u in 1:length(all_data)) {
print(u)
extended_data <- all_data[[u]][which(all_data[[u]]$Duration > high_duration),]
cur_index <- length(long_duration_list)+1
long_duration_list[[cur_index]] <- extended_data
names(long_duration_list)[cur_index] <- names(all_data)[u]
extended_bin <- sort(unique(extended_data$Bin))
extended_bin_str <- paste(unlist(extended_bin), collapse="; ")
colname_to_update <- ifelse(type == "feed", "long_feed_duration_bin", "long_water_duration_bin")
Insentec_warning[u, colname_to_update] <- extended_bin_str #record it on warning message sheet
}
return(list("LongDurationList" = long_duration_list, "InsentecWarning" = Insentec_warning))
}
##### feed data warning
if ((data_source == "feed") | (data_source == "feed and water")) {
# long feeding duration
results <- check_long_durations(all_feed, high_feed_dur_threshold, master_feed, Insentec_warning, type = "feed")
long_feed_dur_list <- results$LongDurationList
Insentec_warning <- results$InsentecWarning
}
##### feed data warning
if ((data_source == "feed") | (data_source == "feed and water")) {
# long feeding duration
results <- check_long_durations(all_feed, high_feed_dur_threshold, master_feed, Insentec_warning, type = "feed")
long_feed_dur_list <- results$LongDurationList
Insentec_warning <- results$InsentecWarning
}
##### water data warning
if ((data_source == "water") | (data_source == "feed and water")) {
# long drinking duration
results <- check_long_durations(all_water, high_water_dur_threshold, master_wat, Insentec_warning, type = "water")
long_wat_dur_list <- results$LongDurationList
Insentec_warning <- results$InsentecWarning
}
View(long_feed_dur_list)
View(long_wat_dur_list)
View(long_feed_dur_list[["2021-01-22"]])
View(all_feed)
View(all_feed[["2021-01-20"]])
View(all_feed[["2021-01-21"]])
View(all_feed[["2021-01-22"]])
View(all_water)
View(all_water[["2021-01-20"]])
