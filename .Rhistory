#' Specifically, it deletes rows until it finds a row where the start time is after 20:00
#' and the subsequent row's start time is before 05:00.
#'
#' @param data_frame A dataframe containing a `Start` column with time entries.
#' @return A modified dataframe with selected rows based on the time threshold.
#' @export
handle_next_day_after_daylight <- function(data_frame) {
temp <- data_frame
temp$Start2 <- as.integer(hour(hms(temp$Start)))
temp$toDelete <- 0
for (p in 1:(nrow(temp)-1)) {
temp$toDelete[p] <- 1
if ((temp$Start2[p] > 20) & (temp$Start2[p+1] < 5)) {
break
}
}
temp2 <- temp[which(temp$toDelete == 0), ]
temp2$toDelete <- NULL
temp2$Start2 <- NULL
return(temp2)
}
#' Adjust Data for Daylight Saving Changes
#'
#' This function adjusts the provided data based on daylight saving changes for a given year and month.
#' Depending on the current month (spring or fall), and the exact date (whether it's the daylight saving change date
#' or the subsequent day), it applies the necessary modifications to the data frame.
#'
#' @param df Dataframe with the events (feed or water visit data) containing columns `Start` and `End` with time entries.
#' @param cur_date the current date of the dataframe
#' @param cur_year Integer representing the current year.
#' @param cur_month Integer representing the current month.
#' @param daylight_saving_table Dataframe containing information about daylight saving changes, with columns for the year, spring and fall change dates, and the subsequent day dates.
#'
#' @return A dataframe adjusted for daylight saving time changes.
daylight_saving_adjust <- function(df, cur_date, cur_year, cur_month, daylight_saving_table) {
# 1. Determine the daylight saving times
daylight_times <- determine_daylight_saving_times(cur_year, cur_month, daylight_saving_table)
# 2. Adjust data for daylight saving based on conditions
# determine if current period is in the spring or fall
# this is fall: delete 2am-3am and move all time after 3am by 1 hour earlier
if (cur_month > 9) {
# If current day is the day when daylight saving change happened
if (cur_date == daylight_times$daylight_change_date) {
df <- adjust_data_for_daylight_saving_fall(df, daylight_times$daylight_change_time, daylight_times$daylight_change_time2)
}
# this is spring: move all time after 2am to be 1 hour later
} else {
# If current day is the day when daylight saving change happened
if (cur_date == daylight_times$daylight_change_date) {
df <- adjust_data_for_daylight_saving_spring(df, daylight_times$daylight_change_time)
# If current day is the next day after daylight saving change happened
} else if (cur_date == daylight_times$daylight_change_next_date) {
df <- handle_next_day_after_daylight(df)
}
}
return(df)
}
#' Process file names
#'
#' This function processes a vector of file names: trims white spaces, replaces
#' slashes and spaces with underscores, and extracts date information. It then
#' returns a data frame with original file names and extracted dates.
#'
#' @param fileNames A character vector of file names.
#' @param col_name A string specifying the column name for the file names in the
#' output data frame.
#'
#' @return A data frame with original file names and extracted dates.
#'
#' @examples
#' file_name_processing(c("feed/VR200715.DAT", "feed/VR200716.DAT"), "Feed_dir")
file_name_processing <- function(fileNames, col_name){
file_name <- data.frame(fileNames)
colnames(file_name) <- c(col_name)
file_name_mod <- chartr("/ .", "___", trimws(file_name[,1]))
date <- sapply(strsplit(file_name_mod, "_"), function(x) substring(x[length(x)-1], 3))
cbind(file_name, date = date)
}
#' Compare feed and water file names
#'
#' This function compares feed and water file names, and keeps only the file
#' names that have both feed and water data available at the same time.
#'
#' @param fileNames.f A character vector of feed file names.
#' @param fileNames.w A character vector of water file names.
#'
#' @return A list with updated feed and water file names (dates with both feed
#' and water data available at the same time).
#'
#' @examples
#' compare_files(c("feed/VR200715.DAT", "feed/VR200716.DAT"), c("water/VW200715.DAT"))
compare_files <- function(fileNames.f, fileNames.w){
feed_name <- file_name_processing(fileNames.f, "Feed_dir")
wat_name <- file_name_processing(fileNames.w, "Drink_dir")
compare_sheet <- merge(feed_name, wat_name, all = TRUE)
compare_sheet <- compare_sheet[order(compare_sheet$date),]
compare_sheet2 <- na.omit(compare_sheet)
compare_sheet2$date <- ymd(compare_sheet2$date, tz=time_zone)
compare_sheet2
}
#' Get date range for this dataset
#'
#' This function takes in a dataframe generated by compare_files()
#' and calculates the date range based on the date column.
#'
#' @param df A dataframe generated by compare_files().
#'
#' @return A list with start date, end date, and date range string.
#'
#' @examples
#' df <- compare_files(c("feed/VR200715.DAT", "feed/VR200716.DAT"), c("water/VW200715.DAT"))
#' get_date_range(df)
get_date_range <- function(df){
# Check if the dataframe has a date column
if(!"date" %in% names(df)){
stop("The input dataframe does not have a date column.")
}
# Check if the dataframe has any rows
if(nrow(df) == 0){
print("Warning: The input dataframe does not have any rows.")
return(list())
}
# Calculate start and end date
start_date <- min(df$date)
end_date <- max(df$date)
# Generate date range string
date_range <- ifelse((start_date != end_date), paste(start_date, end_date, sep = "_"), as.character(start_date))
list(start_date = start_date, end_date = end_date, date_range = date_range)
}
#' Remove specific cows from the dataframe
#'
#' This function filters out rows from the provided dataframe `df`
#' that contain cows specified in the `cow_delete_list`.
#'
#' @param df A dataframe containing a column named "Cow".
#' @param cow_delete_list A vector of cows to be deleted from `df`.
#'
#' @return A dataframe without the rows containing cows from `cow_delete_list`.
#'
#' @examples
#' \dontrun{
#' df <- data.frame(Cow = c("A", "B", "C", "D"), Value = c(1, 2, 3, 4))
#' cow_delete_list <- c("A", "C")
#' cow_delete(df, cow_delete_list)
#' }
cow_delete <- function(df, cow_delete_list) {
to_delete <- df[which(df$Cow %in% cow_delete_list),]
if (nrow(to_delete) != 0) {
df_processed <- df[-which(df$Cow %in% cow_delete_list),]
return(df_processed)
} else {
return(df)
}
}
#' Delete rows with specific transponder ID
#'
#' @param df Data frame from which to delete rows.
#' @param transponder_delete_list List of transponder ID to delete.
#' @return Data frame with rows that contain certain trasponder ID deleted.
transponder_delete <- function(df, transponder_delete_list) {
to_delete <- df[which(df$Transponder %in% transponder_delete_list), ]
if (nrow(to_delete) != 0) {
df[-which(df$Transponder %in% transponder_delete_list), ]
} else {
df
}
}
#' Delete rows outside specific bin range
#'
#' @param df Data frame from which to delete rows.
#' @param min_bin Minimum bin ID to keep.
#' @param max_bin Maximum bin ID to keep.
#' @return Data frame with rows deleted.
bin_delete <- function(df, min_bin, max_bin) {
df[df$Bin >= min_bin & df$Bin <= max_bin, ]
}
#' Process feeder data
#'
#' @param file_name File path for the feeder data.
#' @param coln Column names for the feeder data.
#' @param cow_delete_list List of cow values to delete.
#' @param feed_transponder_delete_list List of transponder values specific to feeder data to delete.
#' @param min_feed_bin Minimum feeder bin value to keep.
#' @param max_feed_bin Maximum feeder bin value to keep.
#' @param feed_coln_to_keep Columns to keep in the feeder data.
#' @return Processed data frame for feeder.
process_feeder_data <- function(file_name, coln, cow_delete_list, feed_transponder_delete_list, min_feed_bin, max_feed_bin, feed_coln_to_keep) {
feeder = read.table(file_name, header = F, sep = ",")
colnames(feeder) = coln
feeder = cow_delete(feeder, cow_delete_list)
feeder = transponder_delete(feeder, feed_transponder_delete_list)
feeder = bin_delete(feeder, min_feed_bin, max_feed_bin)
feeder[, feed_coln_to_keep]
}
#' Process water data
#'
#' @param file_name File path for the water data.
#' @param coln_wat Column names for the water data.
#' @param cow_delete_list List of cow values to delete.
#' @param wat_transponder_delete_list List of transponder values specific to water data to delete.
#' @param min_wat_bin Minimum water bin value to keep.
#' @param max_wat_bin Maximum water bin value to keep.
#' @param wat_coln_to_keep Columns to keep in the water data.
#' @param bin_id_add The number to add to bin IDs in order to distinguish with feed bin ID
#
#' @return Processed data frame for water.
process_water_data <- function(file_name, coln_wat, cow_delete_list, wat_transponder_delete_list, min_wat_bin, max_wat_bin, wat_coln_to_keep, bin_id_add) {
water = read.table(file_name, header = F, sep = ",")
colnames(water) = coln_wat
water = cow_delete(water, cow_delete_list)
water = transponder_delete(water, wat_transponder_delete_list)
water = bin_delete(water, min_wat_bin, max_wat_bin)
rename_water_bins(water[, wat_coln_to_keep],bin_id_add, min_wat_bin, max_wat_bin)
}
#' Rename water bins
#'
#' @param water_df Data frame of water data.
#' @param bin_id_add The number to add to bin IDs in order to distinguish with feed bin ID
#' @param min_wat_bin Minimum water bin value for renaming.
#' @param max_wat_bin Maximum water bin value for renaming.
#' @return Data frame with water bins renamed.
rename_water_bins <- function(water_df, bin_id_add, min_wat_bin, max_wat_bin) {
for (i in min_wat_bin:max_wat_bin) {
water_df$Bin[which(water_df$Bin == i)] = bin_id_add + i
}
water_df
}
#' Process Multiple Feeder Data Files
#'
#' This function processes multiple feeder data files, trims the start and end times,
#' adjusts for daylight saving, and finally returns a list of the processed data.
#'
#' @param fileNames.f A character vector containing file paths of feeder data to be processed. feed data files must be named as "**yymmdd.DAT"
#' @param coln Column names for the data.
#' @param cow_delete_list A list of cows to be deleted from the analysis.
#' @param feed_transponder_delete_list A list of feed transponders to be deleted from the analysis.
#' @param min_feed_bin Numeric. Minimum ID for the feed bin.
#' @param max_feed_bin Numeric. Maximum ID for the feed bin.
#' @param feed_coln_to_keep A character vector of column names to retain in the final output.
#'
#' @return A list of processed feeder data, with each list item corresponding to a file.ID
process_all_feed <- function(fileNames.f, coln, cow_delete_list, feed_transponder_delete_list, min_feed_bin, max_feed_bin, feed_coln_to_keep) {
len = length(fileNames.f)
all.fed=list()
for(i in 1:len)
{
fed.1 = process_feeder_data(as.character(fileNames.f[i]), coln, cow_delete_list, feed_transponder_delete_list, min_feed_bin, max_feed_bin, feed_coln_to_keep)
all.fed[[i]]=na.omit(fed.1)
# trim the start and end time format
all.fed[[i]]$Start <- trimws(all.fed[[i]]$Start, which = "both")
all.fed[[i]]$End <- trimws(all.fed[[i]]$End, which = "both")
############################ Daylight saving change ########################
date=substring(as.character(fileNames.f[i]),nchar(as.character(fileNames.f[i]))-9,nchar(as.character(fileNames.f[i]))-4) #this gets the date from the file name
cur_date <- ymd(date, tz=time_zone)
date = as.character(cur_date)
cur_year <- as.integer(year(cur_date))
cur_month <- as.integer(month(cur_date))
all.fed[[i]] = daylight_saving_adjust(all.fed[[i]], cur_date, cur_year, cur_month, daylight_saving_table)
#Adjusting start and end times to make R recognize the date and time format
all.fed[[i]]$Start=paste(rep(date,dim(all.fed[[i]])[1]),all.fed[[i]]$Start)
all.fed[[i]]$Start=ymd_hms(all.fed[[i]]$Start, tz=time_zone)
all.fed[[i]]$End=paste(rep(date,dim(all.fed[[i]])[1]),all.fed[[i]]$End)
all.fed[[i]]$End=ymd_hms(all.fed[[i]]$End, tz=time_zone)
#Adding dates as name
names(all.fed)[i]=date
}
return(all.fed)
}
#' Process Multiple Water Data Files
#'
#' This function processes multiple water data files, adjusts timings,
#' and returns a list of the processed data.
#'
#' @param fileNames.w A character vector containing file paths of water data to be processed. Water data files must be named as "**yymmdd.DAT"
#' @param coln.wat Column names for the water data.
#' @param cow_delete_list A list of cows to be deleted from the analysis.
#' @param wat_transponder_delete_list A list of water transponders to be deleted from the analysis.
#' @param min_wat_bin Numeric. Minimum value for water data.
#' @param max_wat_bin Numeric. Maximum value for water data.
#' @param wat_coln_to_keep A character vector of column names to retain in the final output.
#' @param bin_id_add The number to add to bin IDs in order to distinguish with feed bin ID
#'
#' @return A list of processed water data, with each list item corresponding to a file.
#' @export
#'
#' @examples
#' # This is a placeholder for example usage, it's good practice to include a working example here.
#' process_all_water(fileNames.w = c("path_to_water_file1", "path_to_water_file2"), ...)
process_all_water <- function(fileNames.w, coln.wat, cow_delete_list, wat_transponder_delete_list, min_wat_bin, max_wat_bin, wat_coln_to_keep, bin_id_add) {
len = length(fileNames.w)
all.wat=list()
for(i in 1:len)
{
wat.1 = process_water_data(as.character(fileNames.w[i]), coln.wat, cow_delete_list, wat_transponder_delete_list, min_wat_bin, max_wat_bin, wat_coln_to_keep, bin_id_add)
all.wat[[i]]=wat.1[which(wat.1$Bin>100),]
all.wat[[i]]=na.omit(all.wat[[i]])
# trim the start and end time format
all.wat[[i]]$Start <- trimws(all.wat[[i]]$Start, which = "both")
all.wat[[i]]$End <- trimws(all.wat[[i]]$End, which = "both")
############################ Daylight saving change ########################
date=substring(as.character(fileNames.w[i]),nchar(as.character(fileNames.w[i]))-9,nchar(as.character(fileNames.w[i]))-4) #this gets the date from the file name
cur_date <- ymd(date, tz=time_zone)
date = as.character(cur_date)
cur_year <- as.integer(year(cur_date))
cur_month <- as.integer(month(cur_date))
all.wat[[i]] = daylight_saving_adjust(all.wat[[i]], cur_date, cur_year, cur_month, daylight_saving_table)
#Adjusting start and end times to make R recognize the date and time format
all.wat[[i]]$Start=paste(rep(date,dim(all.wat[[i]])[1]),all.wat[[i]]$Start)
all.wat[[i]]$Start=ymd_hms(all.wat[[i]]$Start, tz=time_zone)
all.wat[[i]]$End=paste(rep(date,dim(all.wat[[i]])[1]),all.wat[[i]]$End)
all.wat[[i]]$End=ymd_hms(all.wat[[i]]$End, tz=time_zone)
#Adding dates as name
names(all.wat)[i]=date
}
return(all.wat)
}
#' Combine feeder and water data
#'
#' This function takes in lists containing feeder and water data and returns
#' a combined list where each element is the row-bound version of the
#' respective elements of the input lists.
#'
#' @param all.fed A list containing data frames of feeder data.
#' @param all.wat A list containing data frames of water data.
#'
#' @return A list combined feed and water data, grouped by dates
combine_feeder_and_water_data <- function(all.fed, all.wat) {
# Check if the lengths of all.fed and all.wat are the same
if(length(all.fed) != length(all.wat)) {
stop("The lengths of all.fed and all.wat are not the same!")
}
all.comb <- list()
for(i in seq_along(all.fed)) {
all.comb[[i]] = rbind(all.fed[[i]], all.wat[[i]])
#Adding dates as name
date = names(all.fed)[i]
names(all.comb)[i]=date
}
return(all.comb)
}
#' Merge data into a master sheet
#'
#' This function consolidates all the data frames present in the input list
#' and returns a single data frame.
#'
#' @param data_list A list containing data frames.
#'
#' @return A consolidated data frame.
merge_data <- function(data_list) {
if (length(data_list) == 0) {
stop("The input list is empty!")
}
# Use do.call with rbind to efficiently concatenate all data frames in the list
master_data <- do.call(rbind, data_list)
master_data$date <- date(master_data$Start)
return(master_data)
}
#' Capitalize the first letter of a string.
#'
#' This function capitalizes the first letter of a given string while making all other characters lowercase.
#'
#' @param s A character string to be capitalized.
#'
#' @return A string with the first letter capitalized.
capitalizeFirst <- function(s) {
paste0(toupper(substr(s, 1, 1)), tolower(substr(s, 2, nchar(s))))
}
#' De-capitalize the first letter of a string.
#'
#' This function de-capitalizes the first letter of a given string while keeping the rest of the characters unchanged.
#'
#' @param s A character string whose first letter will be de-capitalized.
#'
#' @return A string with the first letter de-capitalized.
deCapitalizeFirst <- function(s) {
paste0(tolower(substr(s, 1, 1)), substr(s, 2, nchar(s)))
}
# initial process and quaity check for Insentec data, and generate warning dataframe
results <- generate_warning_df(data_source = "feed and water", all_feed = all.fed,
all_water = all.wat, high_feed_dur_threshold,
high_water_dur_threshold, min_feed_bin, max_feed_bin,
min_wat_bin, max_wat_bin, bin_id_add,
total_cow_expt, low_visit_threshold, time_zone)
Insentec_warning <- results$Insentec_warning
all.fed2 <- results$feed
all.wat2 <- results$water
all.comb2 <- results$comb
# combine data frame different dates into 1 master dataframe
# Calling the function for each data list:
master_feeding <- merge_data(all.fed2)
master_drinking <- merge_data(all.wat2)
master_comb <- merge_data(all.comb2)
save(master_feeding, file = (here::here(paste0("data/results/", "Cleaned_feeding_original_data_combined.rda"))))
save(master_drinking, file = (here::here(paste0("data/results/", "Cleaned_drinking_original_data_combined.rda"))))
save(master_comb, file = (here::here(paste0("data/results/", "Cleaned_feeding_drinking_original_data_combined.rda"))))
# get daily feed and water intake, duration, total visit summary
result <- merge_feed_water_summary(master_feeding, master_drinking, Insentec_warning,
feed_intake_low_bar, feed_intake_high_bar,
water_intake_low_bar, water_intake_high_bar)
check_intake <- function(intake_data, warning_data, type = c("feeding", "drinking"),
limit = c("low", "high"), feed_intake_low_bar = feed_intake_low_bar,
feed_intake_high_bar = feed_intake_high_bar,
water_intake_low_bar = water_intake_low_bar,
water_intake_high_bar = water_intake_high_bar) {
type <- deCapitalizeFirst(type)
# Define thresholds based on type and limit
thresholds <- list(
feeding = list(low = feed_intake_low_bar, high = feed_intake_high_bar),
drinking = list(low = water_intake_low_bar, high = water_intake_high_bar)
)
threshold <- thresholds[[type]][[limit]]
colname <- ifelse(type == "feeding", "Feeding_Intake(kg)", "Drinking_Intake(kg)")
# Subset data based on threshold
if (limit == "low") {
abnormal_intake <- intake_data[which(intake_data[[colname]]< threshold), ]
} else if (limit == "high") {
abnormal_intake <- intake_data[which(intake_data[[colname]]> threshold), ]
}
if (nrow(abnormal_intake) > 0) {
abnormal_intake$comb_str <- paste("Cow ", abnormal_intake$Cow, ", ", abnormal_intake[[colname]], "kg")
for (i in 1:nrow(warning_data)) {
cur_date <- warning_data$date[i]
cur_day_abnormal <- abnormal_intake[which(abnormal_intake$date == cur_date), ]
cur_day_abnormal_cow <- sort(unique(cur_day_abnormal$comb_str))
colname <- paste0(limit, "_daily_", type, "_intake_cows")
warning_data[[colname]][i] <- paste(unlist(cur_day_abnormal_cow), collapse = "; ")
}
}
return(warning_data)
}
#' Merge Feed and Water Summary Data
#'
#' This function first summarizes the feed and water data for each cow on a daily basis.
#' It then checks and updates the warnings for cows with abnormally high or low intakes.
#' Finally, it merges the summaries and warnings together to return a final data set.
#'
#' @param master_f A data frame containing feed data.
#' @param master_d A data frame containing drink data.
#' @param Insentec_warning A data frame containing the initial warning data.
#' @param feed_intake_low_bar A numeric threshold for low feeding intake.
#' @param feed_intake_high_bar A numeric threshold for high feeding intake.
#' @param water_intake_low_bar A numeric threshold for low water intake.
#' @param water_intake_high_bar A numeric threshold for high water intake.
#'
#' @return A list containing two data frames: 'Insentec_final_summary' which summarizes
#'   the feed and water data, and 'Insentec_warning' which contains the updated warnings.
merge_feed_water_summary <- function(master_f = NULL, master_d = NULL, Insentec_warning,
feed_intake_low_bar, feed_intake_high_bar,
water_intake_low_bar, water_intake_high_bar) {
# get feed and drinking summary for each day for each cow
feed_summary <- summarize_feed_water_data(master_f, type = "Feeding")
drink_summary <- summarize_feed_water_data(master_d, type = "Drinking")
# feeding
feeding_intake <- feed_summary$intake
feeding_duration <- feed_summary$duration
feeding_visits <- feed_summary$visits
# drinking
drinking_intake <- drink_summary$intake
drinking_duration <- drink_summary$duration
drinking_visits <- drink_summary$visits
# check for low feeding and drinking intake
Insentec_warning <- check_intake(feeding_intake, Insentec_warning, type = "feeding",
limit = "low", feed_intake_low_bar, feed_intake_high_bar,
water_intake_low_bar, water_intake_high_bar)
Insentec_warning <- check_intake(feeding_intake, Insentec_warning, type = "feeding",
limit = "high", feed_intake_low_bar, feed_intake_high_bar,
water_intake_low_bar, water_intake_high_bar)
Insentec_warning <- check_intake(drinking_intake, Insentec_warning, type = "drinking",
limit = "low", feed_intake_low_bar, feed_intake_high_bar,
water_intake_low_bar, water_intake_high_bar)
Insentec_warning <- check_intake(drinking_intake, Insentec_warning, type = "drinking",
limit = "high", feed_intake_low_bar, feed_intake_high_bar,
water_intake_low_bar, water_intake_high_bar)
Insentec_final_summary <- join_all(list(feeding_intake, feeding_duration, feeding_visits, drinking_intake, drinking_duration, drinking_visits), by = c("date", "Cow"))
Insentec_final_summary <- Insentec_final_summary[order(Insentec_final_summary$date, Insentec_final_summary$Cow),]
Insentec_final_summary[is.na(Insentec_final_summary)] <- 0 # remove NA with 0
save(Insentec_warning, file = (here::here(paste0("data/results/", "Insentec_warning.rda"))))
save(Insentec_final_summary, file = (here::here(paste0("data/results/", "Feeding and drinking analysis.rda"))))
return(list(Insentec_final_summary = Insentec_final_summary,
Insentec_warning = Insentec_warning))
}
# initial process and quaity check for Insentec data, and generate warning dataframe
results <- generate_warning_df(data_source = "feed and water", all_feed = all.fed,
all_water = all.wat, high_feed_dur_threshold,
high_water_dur_threshold, min_feed_bin, max_feed_bin,
min_wat_bin, max_wat_bin, bin_id_add,
total_cow_expt, low_visit_threshold, time_zone)
Insentec_warning <- results$Insentec_warning
all.fed2 <- results$feed
all.wat2 <- results$water
all.comb2 <- results$comb
# combine data frame different dates into 1 master dataframe
# Calling the function for each data list:
master_feeding <- merge_data(all.fed2)
master_drinking <- merge_data(all.wat2)
master_comb <- merge_data(all.comb2)
save(master_feeding, file = (here::here(paste0("data/results/", "Cleaned_feeding_original_data_combined.rda"))))
save(master_drinking, file = (here::here(paste0("data/results/", "Cleaned_drinking_original_data_combined.rda"))))
save(master_comb, file = (here::here(paste0("data/results/", "Cleaned_feeding_drinking_original_data_combined.rda"))))
# get daily feed and water intake, duration, total visit summary
result <- merge_feed_water_summary(master_feeding, master_drinking, Insentec_warning,
feed_intake_low_bar, feed_intake_high_bar,
water_intake_low_bar, water_intake_high_bar)
Insentec_final_summary <- result$Insentec_final_summary
Insentec_warning <- result$Insentec_warning
View(Insentec_final_summary)
20571/60
20571/3600
3 * 58
3*48
str(all.comb2)
str(Insentec_final_summary)
