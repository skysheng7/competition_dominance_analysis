load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/all.comb2.RData")
load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/replacement_list_by_date.RData")
all_comb2 = all.comb2
i = 1
cur_replacement <- replacement_list_by_date[[i]]
cur_feed_wat <- all_comb2[[i]]
cur_replacement$actor_at_another_bin <- 0
View(cur_replacement)
View(cur_feed_wat)
cur_replacement$actor_at_another_bin <- 0
for (k in 1:nrow(cur_replacement)) {
cur_time <-cur_replacement$Time[k]
cur_actor <- cur_replacement$Actor_cow[k]
cur_actor_feed_wat <- cur_feed_wat[which((cur_feed_wat$Cow == cur_actor) & (cur_feed_wat$Start <= cur_time) & (cur_feed_wat$End >= cur_time)),]
if(nrow(cur_actor_feed_wat)>0) {
cur_replacement$actor_at_another_bin[k] <- 0
}
}
cur_replacement$actor_at_another_bin <- 0
for (k in 1:nrow(cur_replacement)) {
cur_time <-cur_replacement$Time[k]
cur_actor <- cur_replacement$Actor_cow[k]
cur_actor_feed_wat <- cur_feed_wat[which((cur_feed_wat$Cow == cur_actor) & (cur_feed_wat$Start <= cur_time) & (cur_feed_wat$End >= cur_time)),]
if(nrow(cur_actor_feed_wat)>0) {
cur_replacement$actor_at_another_bin[k] <- 1
}
}
test <- cur_feed_wat[which(cur_feed_wat$Cow == 6005)]
test <- cur_feed_wat[which(cur_feed_wat$Cow == 6005),]
View(test)
load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/all.comb2.RData")
View(all.comb2)
View(all.comb2[["2020-07-15"]])
load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/replacement_list_by_date.RData")
str(all.comb2[[1]])
load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/master_comb.RData")
View(master_comb)
View(master_comb)
load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/warning_days.RData")
View(warning_days)
red_warning <- warning_days[which(!is.na(warning_days$Red_warning)),]
red_warning <- warning_days[which(warning_days$Red_warning != ""),]
View(red_warning)
# Feeder Occupancy calculation method 3:
#                    Occupied bin num
#   --------------------------------------------------
#      total bin num - unoccupied bins that are empty
################################################################################
# Feeder Occupancy calculation method 4:
#                 Occupied bin with feed num
#   --------------------------------------------------
#                 total bin with feed num
################################################################################
method_type = 3
# identify days that need to be discarded
days_to_be_discarded <- warning_days[which(warning_days$Red_warning != ""),]
# track cow enroll and exclude data
cow_track_sheet <- cow_track(all_comb)
#' Track Cow Enrollment and Exclusion Over Time
#'
#' This function records the number of cows in a group over different days,
#' and logs which cows got excluded or enrolled.
#'
#' @param all_comb A list of data frames where each data frame corresponds to a day's cow records.
#' @param time_zone A string indicating the time zone, default is "America/Los_Angeles".
#'
#' @return A data frame that contains daily statistics about cow enrollment and exclusion.
#'
#' @import lubridate
#' @export
cow_track <- function(all_comb, time_zone = "America/Los_Angeles") {
date_list <- ymd(names(all_comb), tz=time_zone)
cow_track_sheet <- data.frame(date_list)
colnames(cow_track_sheet) <- c("date")
cow_track_sheet$cow_num <- 0
cow_track_sheet$cow_list <- ""
cow_track_sheet$excluded_num <- 0
cow_track_sheet$excluded_cow <- ""
cow_track_sheet$enroll_num <- 0
cow_track_sheet$enroll_cow <- ""
cow_track_sheet$re_enrolled <- ""
for (date_i in 1:length(date_list)) {
cur_sheet <- all_comb[[date_i]]
cur_cow_list <- sort(unique(cur_sheet$Cow))
cur_cow_num <- length(cur_cow_list)
cow_track_sheet$cow_num[date_i] <- cur_cow_num
cow_track_sheet$cow_list[date_i] <- paste(unlist(cur_cow_list), collapse="; ")
# if this is the first day of the trial
if (date_i == 1) {
total_cow_list <- cur_cow_list
# if this is not the first day of the trial
} else {
prev_cow_list <- as.integer(strsplit(cow_track_sheet$cow_list[date_i - 1], "; ")[[1]])
enrolled <- setdiff(cur_cow_list, prev_cow_list)
excluded <- setdiff(prev_cow_list, cur_cow_list)
# record cows newly enrolled
if (length(enrolled) != 0) {
cow_track_sheet$enroll_num[date_i] <- length(enrolled)
cow_track_sheet$enroll_cow[date_i] <- paste(unlist(enrolled), collapse="; ")
reEnrolled <- intersect(total_cow_list, enrolled) # the total cow list did not included cows from today yet
# check if they had experience in the group before (they were in the group before,
# excluded in the past, but now they were re-enrolled)
if (length(reEnrolled) != 0) {
cow_track_sheet$re_enrolled[date_i] <- paste(unlist(reEnrolled), collapse="; ")
}
}
# record cows excluded
if (length(excluded) != 0) {
cow_track_sheet$excluded_num[date_i] <- length(excluded)
cow_track_sheet$excluded_cow[date_i] <- paste(unlist(excluded), collapse="; ")
}
# update the total cow list in the end
total_cow_list <- unique(c(total_cow_list, cur_cow_list))
}
}
return(cow_track_sheet)
}
#' Extra Processing for Master Feed Sheet
#'
#' This function provides additional processing for a master feed data frame.
#' It extracts specific columns and adds new ones like 'date', 'start_hour', and 'end_hour'.
#'
#' @param master_sheet A data frame containing the master feed and water data.
#'
#' @return A data frame that has been processed to include only desired columns and some new ones.
feed_extra_processing <- function(master_sheet) {
master_sheet <- master_sheet[, c("Cow", "Bin", "Start", "End", "date")]
master_sheet$start_hour <- hour(master_sheet$Start)
master_sheet$end_hour <- hour(master_sheet$End)
return(master_sheet)
}
# track cow enroll and exclude data
cow_track_sheet <- cow_track(all_comb)
# track cow enroll and exclude data
cow_track_sheet <- cow_track(master_comb)
load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/all.comb2.RData")
# track cow enroll and exclude data
cow_track_sheet <- cow_track(all.comb2)
View(cow_track_sheet)
cow_track_sheet <- merge(cow_track_sheet, days_to_be_discarded, all = TRUE) # delete days that has technical issues
cow_track_sheet <- cow_track_sheet[which(!is.na(cow_track_sheet$cow_num)),]
cow_track_sheet2 <- cow_track_sheet[which((cow_track_sheet$enroll_num != 0) | (cow_track_sheet$excluded_num != 0)),]
View(cow_track_sheet2)
cow_track_sheet5 <- cow_track_sheet3[-which((!is.na(cow_track_sheet3$Red_warning)) & ((cow_track_sheet3$excluded_num > 12) | (cow_track_sheet3$enroll_num > 12))),]
master_feed_replacement_all <- merge_data(replacement_list_by_date)
merge_data <- function(data_list) {
if (length(data_list) == 0) {
stop("The input list is empty!")
}
# Use do.call with rbind to efficiently concatenate all data frames in the list
master_data <- do.call(rbind, data_list)
master_data$date <- date(master_data$Start)
return(master_data)
}
master_feed_replacement_all <- merge_data(replacement_list_by_date)
load("/Users/skysheng/Library/CloudStorage/OneDrive-UBC/R package project and Git/competition_dominance_analysis/cache/replacement_list_by_date.RData")
master_feed_replacement_all <- merge_data(replacement_list_by_date)
data_list<- replacement_list_by_date
if (length(data_list) == 0) {
stop("The input list is empty!")
}
# Use do.call with rbind to efficiently concatenate all data frames in the list
master_data <- do.call(rbind, data_list)
View(master_data)
merge_data <- function(data_list) {
if (length(data_list) == 0) {
stop("The input list is empty!")
}
# Use do.call with rbind to efficiently concatenate all data frames in the list
master_data <- do.call(rbind, data_list)
return(master_data)
}
9*10/2
45*10
50*49/2
45*5
